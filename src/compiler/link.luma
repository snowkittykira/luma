[is-word? exp id]:
  and [#word-node.? exp] [= exp.id id]

[link root-node]:
  modules-linked: [#table]
  cycling: [#table]
  result: [#list]

  [scan-module-for-imports exp]:
    assert-at [#list-node.? exp] exp 'top level of module should be a list'
    exp.items.each [. item]:
      when [and [#apply-node.? item] [is-word? [item.items.get 0] 'import']]:
        assert-at [= 2 item.items.length] item 'import should take one argument'
        name: item.items.get 1
        assert-at [#string-node.? name] item 'import should be given a string literal'
        import-module name.value

  [import-module name]:
    internal: combine-strings '&modules/' name
    when [not [modules-linked.has? name]]:
      when [cycling.has? name]:
        assert false [combine-strings 'cycle in import of ' name]
      modules-linked.set name true
      cycling.set name true

      filename: combine-strings name '.luma'
      str: read-file filename
      tokens: read str filename
      mod: resolve [parse tokens]
      scan-module-for-imports mod
      assert-at [mod.items.length .> 0] mod 'empty module (todo: does this ever fire?)'

      result.push [#binding-node internal mod]

      exports-table: mod.items.last
      assert-at [#table-node.? exports-table] exports-table 'modules need to end in a literal table'
      exports-table.items.each [. entry]:
        assert-at [#field-node.? entry] entry 'unknown item in module exports'
        (assert-at [#symbol-node.? entry.key] entry.key 'unknown pair key in module exports')
        result.push
          #binding-node [entry.id.substring 1 entry.id.length]
                        #apply-node [#list [#word-node internal] [#symbol-node entry.id]]
      cycling.remove name

  [scan-module-for-imports root-node]
  result.push root-node
  [#list-node result]
    
#
  .link: link
